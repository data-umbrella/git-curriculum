class MultipleChoice extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.correctAnswer=parseInt(this.getAttribute("data-correct"),10),this.radios=[],this.feedback=[]}connectedCallback(){this.render(),this.initSlots(),this.hideAllFeedback(),this.addListeners()}render(){this.shadowRoot.innerHTML=`
            <style>
            :host {
            display:block;
            max-width: var(--theme-spacing--linelength);
            }
            ::slotted([slot="feedback"]) {
                background: var(--theme-color--outline);
                padding: var(--theme-spacing--1) var(--theme-spacing--gutter);
                margin: calc(-1 * var(--theme-spacing--6)) 0 var(--theme-spacing--gutter) 0;
            }
            </style>
            <slot name="quiz"></slot>
            <slot name="feedback"></slot>
        `}initSlots(){this.radios=this.shadowRoot.querySelector('slot[name="quiz"]').assignedElements()[0].querySelectorAll('[type="radio"]'),this.feedback=this.shadowRoot.querySelector('slot[name="feedback"]').assignedElements()[0].querySelectorAll(".c-quiz__remark")}hideAllFeedback(){this.feedback.forEach(e=>e.hidden=!0)}addListeners(){this.radios.forEach(e=>e.addEventListener("change",e=>this.updateFeedback(Number(e.target.value),{passive:!0})))}updateFeedback(e){this.feedback[0].closest("section").classList.remove("is-good"),this.feedback.forEach((t,n)=>{t.hidden=n!==e}),e===this.correctAnswer&&this.feedback[0].closest("section").classList.add("is-good")}}customElements.define("multiple-choice",MultipleChoice)