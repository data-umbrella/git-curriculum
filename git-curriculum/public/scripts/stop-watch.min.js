class StopWatch{constructor(){if(StopWatch.instance)return StopWatch.instance;this.attachListener(),StopWatch.instance=this}attachListener(){const e=document.querySelectorAll(".c-block__time");e.forEach(e=>{e.addEventListener("keydown",t=>{t.key==="Enter"&&!e.classList.contains("is-active")&&this.startTimer(e)}),e.addEventListener("click",()=>{e.classList.contains("is-active")||this.startTimer(e)})})}startTimer(e){const n=e.getAttribute("datetime"),t=this.parseDuration(n);if(!this.isValidDuration(t)){console.error("The datetime attribute is not valid. Please fix it.");return}let s=Date.now();e.classList.add("is-active");const o=setInterval(()=>{const n=this.updateTime(e,s,t);n<=0&&(clearInterval(o),e.classList.remove("is-active"),this.playAlarm(2,200,200))},1e3)}playAlarm(e,t,n){const i=window.AudioContext||window.webkitAudioContext,s=new i,a=async()=>{const e=s.createOscillator();e.type="triangle",e.frequency.setValueAtTime(1e3,s.currentTime),e.connect(s.destination),e.start(),await new Promise(e=>setTimeout(e,n)),e.stop()},o=async n=>{n<=e?(await a(),await new Promise(e=>setTimeout(e,t)),await o(n+1)):s.close()};o(0)}parseDuration(e){const t=e.match(/P(\d+)M/);if(!t)return NaN;const n=parseInt(t[1]);return n*60*1e3}isValidDuration(e){return!isNaN(e)&&e>0}updateTime(e,t,n){const i=Date.now(),a=i-t,s=n-a;if(s<=0)return e.textContent="Countdown finished!",0;const r=Math.floor(s/6e4),o=Math.floor(s%6e4/1e3);return e.textContent=`${r} minutes ${o<10?"0":""}${o} seconds ⏱`,s}}const stopwatchInstance=new StopWatch;export default stopwatchInstance