class SoloView extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.state={currentBlockIndex:0,blocks:[],tocLinks:[],navButtons:{back:null,next:null},fragment:null,touchStartX:0,touchEndX:0},window.addEventListener("hashchange",{passive:!0},this.handleFragment.bind(this)),document.addEventListener("keydown",this.handleKeydown.bind(this))}connectedCallback(){this.render(),this.cacheDOM(),this.addEventListeners(),this.handleFragment(),this.updateView()}disconnectedCallback(){window.removeEventListener("hashchange",this.handleFragment.bind(this)),document.removeEventListener("keydown",this.handleKeydown.bind(this))}cacheDOM(){this.state.blocks=[...this.querySelectorAll('[slot="blocks"] > .c-block')],this.state.tocLinks=[...this.querySelectorAll('[slot="header"] .c-toc li a')],this.state.navButtons.back=this.querySelector('[slot="nav"] .c-solo-view__back'),this.state.navButtons.next=this.querySelector('[slot="nav"] .c-solo-view__next')}addEventListeners(){this.state.tocLinks.forEach((e,t)=>{e.addEventListener("click",()=>this.updateCurrentBlockIndex(t))}),this.state.navButtons.back.addEventListener("click",this.navigateBack),this.state.navButtons.next.addEventListener("click",this.navigateNext),this.addEventListener("touchstart",e=>{this.state.touchStartX=e.changedTouches[0].clientX},{passive:!0}),this.addEventListener("touchend",e=>{const t=e.changedTouches[0].clientX;this.handleSwipeGesture(this.state.touchStartX,t)},{passive:!0}),this.addEventListener("keydown",this.handleKeydown,{passive:!0})}updateCurrentBlockIndex(e){this.state.currentBlockIndex=e,this.updateView()}navigateBack=e=>{this.navigate(e,this.state.currentBlockIndex-1)};navigateNext=e=>{this.navigate(e,this.state.currentBlockIndex+1)};navigate=(e,t)=>{if(t<0||t>=this.state.blocks.length)return;e.preventDefault(),e.stopPropagation(),this.state.tocLinks[t].click()};handleSwipeGesture=(e,t)=>{const n=t-e,s=144;n>s?this.navigateBack(new Event("swipe")):n<-s&&this.navigateNext(new Event("swipe"))};handleKeydown=e=>{e.key==="ArrowLeft"&&this.navigateBack(e),e.key==="ArrowRight"&&this.navigateNext(e)};handleFragment=()=>{const e=window.location.hash.substring(1);if(e){const t=this.state.tocLinks.findIndex(t=>t.getAttribute("href").substring(1)===e);t!==-1&&(this.state.currentBlockIndex=t,this.updateView())}};updateView(){this.state.blocks.forEach((e,t)=>{e.hidden=t!==this.state.currentBlockIndex}),this.state.tocLinks.forEach((e,t)=>{e.classList.toggle("is-active",t===this.state.currentBlockIndex)}),this.state.navButtons.back.style.display=this.state.currentBlockIndex===0?"none":"inline-flex",this.state.navButtons.next.style.display=this.state.currentBlockIndex===this.state.blocks.length-1?"none":"inline-flex"}render(){this.shadowRoot.innerHTML=`
      <style>
        @media (min-width: 768px) {

        :host {
          display: grid;
          grid-template:
          "sidebar blocks" auto
          "sidebar nav" min-content
          "sidebar .  " 1fr / 1fr 4fr;         
          gap: var(--theme-spacing--gutter);
        }
        ::slotted([slot="header"]) {
          position: sticky;
          top: 0;
          grid-area: sidebar;

        }
        ::slotted([slot="blocks"]) {
          padding-top: var(--theme-spacing--6);
          --theme-spacing--scrollmargin: 100vh !important;
          grid-area: blocks;
        }
        ::slotted([slot="nav"]) {
          grid-area: nav;
          margin: 0 0 auto auto;
        }
      }
        
      </style>
      <slot name="header"></slot>
      <slot name="blocks"></slot>
      <slot name="nav"></slot>
    `}}customElements.define("solo-view",SoloView)